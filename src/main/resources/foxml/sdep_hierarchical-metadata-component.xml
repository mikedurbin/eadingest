<?xml version="1.0" encoding="UTF-8"?>
<foxml:digitalObject VERSION="1.1" PID="sdep:hierarchical-metadata-component"
  xmlns:foxml="info:fedora/fedora-system:def/foxml#"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="info:fedora/fedora-system:def/foxml# http://www.fedora.info/definitions/1/0/foxml1-1.xsd">
  <foxml:objectProperties>
    <foxml:property NAME="info:fedora/fedora-system:def/model#state" VALUE="Active"/>
  </foxml:objectProperties>
  <foxml:datastream ID="DC" STATE="A" CONTROL_GROUP="X" VERSIONABLE="true">
    <foxml:datastreamVersion ID="DC1.0" LABEL="Dublin Core Record for this object"
      MIMETYPE="text/xml" FORMAT_URI="http://www.openarchives.org/OAI/2.0/oai_dc/">
      <foxml:xmlContent>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
          xmlns:dc="http://purl.org/dc/elements/1.1/"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:identifier>sdep:hierarchical-metadata-component</dc:identifier>
        </oai_dc:dc>
      </foxml:xmlContent>
    </foxml:datastreamVersion>
  </foxml:datastream>
  <foxml:datastream ID="RELS-EXT" STATE="A" CONTROL_GROUP="X" VERSIONABLE="true">
    <foxml:datastreamVersion ID="RELS-EXT.0" LABEL="" MIMETYPE="application/rdf+xml">
      <foxml:xmlContent>
        <rdf:RDF xmlns:fedora-model="info:fedora/fedora-system:def/model#"
          xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
          <rdf:Description rdf:about="info:fedora/sdep:hierarchical-metadata-component">
            <fedora-model:hasModel rdf:resource="info:fedora/fedora-system:ServiceDeployment-3.0"/>
            <fedora-model:isDeploymentOf rdf:resource="info:fedora/sdef:hierarchical-metadata"/>
            <fedora-model:isContractorOf rdf:resource="info:fedora/cmodel:ead-component"/>
          </rdf:Description>
        </rdf:RDF>
      </foxml:xmlContent>
    </foxml:datastreamVersion>
  </foxml:datastream>
  <foxml:datastream ID="METHODMAP" STATE="A" CONTROL_GROUP="X" VERSIONABLE="true">
    <foxml:datastreamVersion ID="METHODMAP.0" LABEL="" MIMETYPE="text/xml">
      <foxml:xmlContent>
        <fmm:MethodMap xmlns:fmm="http://fedora.comm.nsdlib.org/service/methodmap" name="N/A">
          <fmm:method operationName="getSummary" wsdlMsgName="getSummaryRequest"
            wsdlMsgOutput="getSummaryResponse">
            <fmm:DefaultInputParm defaultValue="$pid" parmName="pid" passBy="VALUE" required="TRUE"/>
            <fmm:DatastreamInputParm parmName="descMetadata" passBy="URL_REF" required="true"/>
            <fmm:MethodReturnType wsdlMsgName="getSummaryResponse" wsdlMsgTOMIME="N/A"/>
          </fmm:method>
          <fmm:method operationName="getFullSummary" wsdlMsgName="getFullSummaryRequest"
            wsdlMsgOutput="getFullSummaryResponse">
            <fmm:DefaultInputParm defaultValue="$pid" parmName="pid" passBy="VALUE" required="TRUE"/>
            <fmm:DatastreamInputParm parmName="descMetadata" passBy="URL_REF" required="true"/>
            <fmm:MethodReturnType wsdlMsgName="getFullSummaryResponse" wsdlMsgTOMIME="N/A"/>
          </fmm:method>
        </fmm:MethodMap>
      </foxml:xmlContent>
    </foxml:datastreamVersion>
  </foxml:datastream>
  <foxml:datastream ID="WSDL" STATE="A" CONTROL_GROUP="X" VERSIONABLE="true">
    <foxml:datastreamVersion ID="WSDL.0" LABEL="" MIMETYPE="text/xml">
      <foxml:xmlContent>
        <wsdl:definitions xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
          xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/"
          xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap"
          xmlns:soapenc="http://schemas.xmlsoap.org/wsdl/soap/encoding"
          xmlns:this="urn:thisNamespace" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="N/A"
          targetNamespace="urn:thisNamespace">
          <wsdl:types>
            <xsd:schema targetNamespace="urn:thisNamespace">
              <xsd:simpleType name="inputType">
                <xsd:restriction base="xsd:string"/>
              </xsd:simpleType>
              <xsd:simpleType name="pidType">
                <xsd:restriction base="xsd:string"/>
              </xsd:simpleType>
            </xsd:schema>
          </wsdl:types>
          <wsdl:message name="getSummaryRequest">
            <wsdl:part name="pid" type="this:pidType"/>
            <wsdl:part name="descMetadata" type="this:inputType"/>
          </wsdl:message>
          <wsdl:message name="getSummaryResponse">
            <wsdl:part name="response" type="xsd:element"/>
          </wsdl:message>
          <wsdl:message name="getFullSummaryRequest">
            <wsdl:part name="pid" type="this:pidType"/>
            <wsdl:part name="descMetadata" type="this:inputType"/>
          </wsdl:message>
          <wsdl:message name="getFullSummaryResponse">
            <wsdl:part name="response" type="xsd:element"/>
          </wsdl:message>
          <wsdl:portType name="portType">
            <wsdl:operation name="getSummary">
              <wsdl:input message="this:getSummaryRequest"/>
              <wsdl:output message="this:getSummaryResponse"/>
            </wsdl:operation>
            <wsdl:operation name="getFullSummary">
              <wsdl:input message="this:getFullSummaryRequest"/>
              <wsdl:output message="this:getFullSummaryResponse"/>
            </wsdl:operation>
          </wsdl:portType>
          <wsdl:service name="N/A">
            <wsdl:port binding="this:binding" name="port">
              <http:address location="LOCAL"/>
            </wsdl:port>
          </wsdl:service>
          <wsdl:binding name="binding" type="this:portType">
            <http:binding verb="GET"/>
            <wsdl:operation name="getSummary">
              <http:operation
                location="http://local.fedora.server/saxon/SaxonServlet?source=(descMetadata)&amp;style=http://local.fedora.server/fedora/get/sdep:hierarchical-metadata-component/XSLT&amp;pid=(pid)&amp;scopecontent_p_max=1&amp;component_max=3&amp;clear-stylesheet-cache=yes"/>
              <wsdl:input>
                <http:urlReplacement/>
              </wsdl:input>
              <wsdl:output>
                <mime:content type="N/A"/>
              </wsdl:output>
            </wsdl:operation>
            <wsdl:operation name="getFullSummary">
              <http:operation
                location="http://local.fedora.server/saxon/SaxonServlet?source=(descMetadata)&amp;style=http://local.fedora.server/fedora/get/sdep:hierarchical-metadata-component/XSLT&amp;pid=(pid)&amp;scopecontent_p_max=99999999&amp;component_max=99999999&amp;clear-stylesheet-cache=yes"/>
              <wsdl:input>
                <http:urlReplacement/>
              </wsdl:input>
              <wsdl:output>
                <mime:content type="N/A"/>
              </wsdl:output>
            </wsdl:operation>
          </wsdl:binding>
        </wsdl:definitions>
      </foxml:xmlContent>
    </foxml:datastreamVersion>
  </foxml:datastream>
  <foxml:datastream ID="DSINPUTSPEC" STATE="A" CONTROL_GROUP="X" VERSIONABLE="true">
    <foxml:datastreamVersion ID="DSINPUTSPEC.0" LABEL="" MIMETYPE="text/xml">
      <foxml:xmlContent>
        <fbs:DSInputSpec xmlns:fbs="http://fedora.comm.nsdlib.org/service/bindspec" label="N/A">
          <fbs:DSInput DSMax="1" DSMin="1" DSOrdinality="false" wsdlMsgPartName="descMetadata">
            <fbs:DSInputLabel>descMetadata</fbs:DSInputLabel>
            <fbs:DSMIME>text/xml</fbs:DSMIME>
            <fbs:DSInputInstruction>N/A</fbs:DSInputInstruction>
          </fbs:DSInput>
        </fbs:DSInputSpec>
      </foxml:xmlContent>
    </foxml:datastreamVersion>
  </foxml:datastream>
  <foxml:datastream ID="XSLT" STATE="A" CONTROL_GROUP="X" VERSIONABLE="true">
    <foxml:datastreamVersion ID="XSLT.0" LABEL="" MIMETYPE="text/xml">
      <foxml:xmlContent>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:s="http://www.w3.org/2001/sw/DataAccess/rf1/result"
    exclude-result-prefixes="xs s"
    version="2.0">
    
    <xsl:output byte-order-mark="no" encoding="UTF-8" media-type="text/xml" xml:space="default" indent="yes"/>
    
    <xsl:variable name="fedora-host">localhost</xsl:variable>
    <xsl:param name="pid" />
    <xsl:param name="debug" />
    <xsl:param name="scopecontent_p_max">1</xsl:param>
    <xsl:param name="component_max">3</xsl:param>
    
    <xsl:template match="/">
        <component>
            <breadcrumbs>
                <xsl:call-template name="outputBreadcrumbs">
                    <xsl:with-param name="pid" select="$pid" />
                </xsl:call-template>
            </breadcrumbs>
            <xsl:variable name="unittitle">
                <xsl:for-each select="//did/unittitle//text()">
                    <xsl:value-of select="current()" />
                </xsl:for-each>
            </xsl:variable>
            <type><xsl:value-of select="//@level"></xsl:value-of></type>
            <xsl:if test="//head">
                <head><xsl:value-of select="//head" /></head>
            </xsl:if>
            <unittitle><xsl:value-of select="normalize-space($unittitle)"></xsl:value-of></unittitle>
            <xsl:variable name="count" select="count(//scopecontent/p)" />
            <xsl:if test="$count &gt; 0">
                <scopecontent>
                    <p_count><xsl:value-of select="$count"></xsl:value-of></p_count>
                    <xsl:for-each select="//scopecontent/p[position() &lt;= number($scopecontent_p_max)]">
                        <xsl:variable name="p">
                            <xsl:for-each select="current()//text()">
                                <xsl:value-of select="current()" />
                            </xsl:for-each>
                        </xsl:variable>
                        <p><xsl:value-of select="normalize-space($p)" /></p>
                    </xsl:for-each>
                </scopecontent>
            </xsl:if>

            <!-- 
                Perform two queries:
                First, find the first item.
                select $object from <#ri> where $object  <info:fedora/fedora-system:def/relations-external#isPartOf> <info:fedora/" + parent + "> minus $object <http://fedora.lib.virginia.edu/relationship#follows> $other
                
                Second, find all items and the item they follow.
                select $next $previous from <#ri> where $next <info:fedora/fedora-system:def/relations-external#isPartOf> <info:fedora/> and $next <http://fedora.lib.virginia.edu/relationship#follows> $previous
                
                Walk through the sparql responses:
                
            -->
            <xsl:variable name="lookupFirstChildUri">
                <xsl:text>http://</xsl:text><xsl:value-of select="$fedora-host" /><xsl:text>:8080/fedora/risearch?type=tuples&amp;lang=itql&amp;format=Sparql&amp;query=select%20%24first%20from%20%3C%23ri%3E%20where%20%24first%20%20%3Cinfo%3Afedora%2Ffedora-system%3Adef%2Frelations-external%23isPartOf%3E%20%3Cinfo%3Afedora%2F</xsl:text>
                <xsl:value-of select="$pid" />
                <xsl:text>%3E%20minus%20%24first%20%3Chttp%3A%2F%2Ffedora.lib.virginia.edu%2Frelationship%23follows%3E%20%24other</xsl:text>
            </xsl:variable>
            <xsl:if test="$debug = true()">
                <xsl:comment>
                    Querying for first part of <xsl:value-of select="$pid" /> using query: <xsl:value-of select="$lookupFirstChildUri" />
                </xsl:comment>
            </xsl:if>
            <xsl:variable name="firstSparql" select="document($lookupFirstChildUri)"></xsl:variable>
            
            <xsl:if test="count($firstSparql/s:sparql/s:results/s:result) &gt; 0">
                <xsl:variable name="lookupSubsequentChildrenUri">
                    <xsl:text>http://</xsl:text><xsl:value-of select="$fedora-host" /><xsl:text>:8080/fedora/risearch?type=tuples&amp;lang=itql&amp;format=Sparql&amp;query=select%20%24next%20%24previous%20from%20%3C%23ri%3E%20where%20%24next%20%3Cinfo%3Afedora%2Ffedora-system%3Adef%2Frelations-external%23isPartOf%3E%20%3Cinfo%3Afedora%2F</xsl:text>
                    <xsl:value-of select="$pid" />
                    <xsl:text>%3E%20and%20%24next%20%3Chttp%3A%2F%2Ffedora.lib.virginia.edu%2Frelationship%23follows%3E%20%24previous</xsl:text>
                </xsl:variable>
                <xsl:if test="$debug = true()">
                    <xsl:comment>
                        Querying for subsequent parts of <xsl:value-of select="$pid" /> using query: <xsl:value-of select="$lookupSubsequentChildrenUri" />
                    </xsl:comment>
                </xsl:if>
                <xsl:variable name="subsequentSparql" select="document($lookupSubsequentChildrenUri)" />
                <xsl:variable name="count" select="count($firstSparql/s:sparql/s:results/s:result) + count($subsequentSparql//s:sparql/s:results/s:result)" />
                <components>
                    <count><xsl:value-of select="$count"></xsl:value-of></count>
                    <xsl:call-template name="outputChildComponents">
                        <xsl:with-param name="iteration" select="1" />
                        <xsl:with-param name="current" select="$firstSparql/s:sparql/s:results/s:result/s:first/@uri"></xsl:with-param>
                        <xsl:with-param name="nextMap" select="$subsequentSparql" />
                    </xsl:call-template>
                </components>
            </xsl:if>
        </component>
    </xsl:template>
    
    <xsl:template name="outputChildComponents">
        <xsl:param name="iteration" />
        <xsl:param name="current" />
        <xsl:param name="nextMap" />
        <xsl:variable name="currentPid" select="substring($current, string-length('info:fedora/') + 1)" />
        <xsl:if test="$iteration &lt;= number($component_max)">
            <xsl:variable name="currentMetadataUrl">
                <xsl:text>http://</xsl:text><xsl:value-of select="$fedora-host" /><xsl:text>:8080/fedora/objects/</xsl:text>
                <xsl:value-of select="$currentPid" />
                <xsl:text>/datastreams/descMetadata/content</xsl:text>
            </xsl:variable>
            <xsl:if test="$debug = true()">
                <xsl:comment>
                    Querying for the metadata for <xsl:value-of select="$currentPid" /> using query: <xsl:value-of select="$currentMetadataUrl" />
                </xsl:comment>
            </xsl:if>
            <xsl:variable name="currentMetadataFragment" select="document($currentMetadataUrl)" />
            <component>
                <id><xsl:value-of select="$currentPid" /></id>
                <type><xsl:value-of select="$currentMetadataFragment//@level"></xsl:value-of></type>
                <xsl:if test="$currentMetadataFragment//head">
                    <head><xsl:value-of select="$currentMetadataFragment//head" /></head>
                </xsl:if>
                <xsl:variable name="unittitle">
                    <xsl:for-each select="$currentMetadataFragment//did/unittitle//text()">
                        <xsl:value-of select="current()" />
                    </xsl:for-each>
                </xsl:variable>
                <xsl:if test="$unittitle">
                    <unittitle><xsl:value-of select="normalize-space($unittitle)" /></unittitle>
                </xsl:if>
                <xsl:if test="count($currentMetadataFragment//scopecontent/p) &gt; 0">
                    <scopecontent>
                        <p_count><xsl:value-of select="count($currentMetadataFragment//scopecontent/p)"></xsl:value-of></p_count>
                        <xsl:for-each select="$currentMetadataFragment//scopecontent/p[position() &lt;= number($scopecontent_p_max)]">
                            <xsl:variable name="p">
                                <xsl:for-each select="current()//text()">
                                    <xsl:value-of select="current()" />
                                </xsl:for-each>
                            </xsl:variable>
                            <p><xsl:value-of select="normalize-space($p)" /></p>
                        </xsl:for-each>
                    </scopecontent>
                </xsl:if>

                <!-- 
                    Perform two queries:
                    First, find the first item.
                    select $object from <#ri> where $object  <info:fedora/fedora-system:def/relations-external#isPartOf> <info:fedora/" + parent + "> minus $object <http://fedora.lib.virginia.edu/relationship#follows> $other
                    
                    Second, find all items and the item they follow.
                    select $next $previous from <#ri> where $next <info:fedora/fedora-system:def/relations-external#isPartOf> <info:fedora/> and $next <http://fedora.lib.virginia.edu/relationship#follows> $previous
                    
                    Walk through the sparql responses:
                 -->  

                <xsl:variable name="lookupFirstChildUri">
                    <xsl:text>http://</xsl:text><xsl:value-of select="$fedora-host" /><xsl:text>:8080/fedora/risearch?type=tuples&amp;lang=itql&amp;format=Sparql&amp;query=select%20%24first%20from%20%3C%23ri%3E%20where%20%24first%20%20%3Cinfo%3Afedora%2Ffedora-system%3Adef%2Frelations-external%23isPartOf%3E%20%3Cinfo%3Afedora%2F</xsl:text>
                    <xsl:value-of select="$currentPid" />
                    <xsl:text>%3E%20minus%20%24first%20%3Chttp%3A%2F%2Ffedora.lib.virginia.edu%2Frelationship%23follows%3E%20%24other</xsl:text>
                </xsl:variable>
                <xsl:if test="$debug = true()">
                    <xsl:comment>
                        Querying for first part of <xsl:value-of select="$pid" /> using query: <xsl:value-of select="$lookupFirstChildUri" />
                    </xsl:comment>
                </xsl:if>
                <xsl:variable name="firstSparql" select="document($lookupFirstChildUri)"></xsl:variable>
                
                <xsl:if test="count($firstSparql/s:sparql/s:results/s:result) &gt; 0">
                    
                    <xsl:variable name="lookupSubsequentChildrenUri">
                        <xsl:text>http://</xsl:text><xsl:value-of select="$fedora-host" /><xsl:text>:8080/fedora/risearch?type=tuples&amp;lang=itql&amp;format=Sparql&amp;query=select%20%24next%20%24previous%20from%20%3C%23ri%3E%20where%20%24next%20%3Cinfo%3Afedora%2Ffedora-system%3Adef%2Frelations-external%23isPartOf%3E%20%3Cinfo%3Afedora%2F</xsl:text>
                        <xsl:value-of select="$currentPid" />
                        <xsl:text>%3E%20and%20%24next%20%3Chttp%3A%2F%2Ffedora.lib.virginia.edu%2Frelationship%23follows%3E%20%24previous</xsl:text>
                    </xsl:variable>
                    <xsl:if test="$debug = true()">
                        <xsl:comment>
                            Querying for subsequent parts of <xsl:value-of select="$pid" /> using query: <xsl:value-of select="$lookupSubsequentChildrenUri" />
                        </xsl:comment>
                    </xsl:if>
                    <xsl:variable name="subsequentSparql" select="document($lookupSubsequentChildrenUri)" />
                    <xsl:variable name="count" select="count($firstSparql/s:sparql/s:results/s:result) + count($subsequentSparql//s:sparql/s:results/s:result)" />
                    <components>
                        <count><xsl:value-of select="$count"></xsl:value-of></count>
                        <xsl:if test="$count &gt; 0">
                            <xsl:call-template name="outputChildComponents">
                                <xsl:with-param name="iteration" select="1" />
                                <xsl:with-param name="current" select="$firstSparql/s:sparql/s:results/s:result/s:first/@uri"></xsl:with-param>
                                <xsl:with-param name="nextMap" select="$subsequentSparql" />
                            </xsl:call-template>
                        </xsl:if>
                    </components>
                </xsl:if>
            </component>
            <xsl:variable name="nextUri" select="$nextMap/s:sparql/s:results/s:result[s:previous/@uri=$current]/s:next/@uri" />
            <xsl:if test="$nextUri">
                <xsl:call-template name="outputChildComponents">
                    <xsl:with-param name="iteration" select="$iteration + 1" />
                    <xsl:with-param name="current" select="$nextUri"></xsl:with-param>
                    <xsl:with-param name="nextMap" select="$nextMap" />
                </xsl:call-template>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    
    <!-- 
        Perform one query to find the parent object:
        select $parent from <#ri> where <info:fedora/$pid> <info:fedora/fedora-system:def/relations-external#isPartOf> $parent
        
      -->  
    <xsl:template name="outputBreadcrumbs">
        <xsl:param name="pid"/>
        
        <xsl:variable name="lookupParentUri">
            <xsl:text>http://</xsl:text><xsl:value-of select="$fedora-host" /><xsl:text>:8080/fedora/risearch?type=tuples&amp;lang=itql&amp;format=Sparql&amp;query=select%20%24parent%20from%20%3C%23ri%3E%20where%20%3Cinfo%3Afedora%2F</xsl:text>
            <xsl:value-of select="$pid" />
            <xsl:text>%3E%20%3Cinfo%3Afedora%2Ffedora-system%3Adef%2Frelations-external%23isPartOf%3E%20%24parent</xsl:text>
        </xsl:variable>
        <xsl:if test="$debug = true()">
            <xsl:comment>
                Querying for parent of <xsl:value-of select="$pid" /> using query: <xsl:value-of select="$lookupParentUri" />
            </xsl:comment>
        </xsl:if>
        <xsl:variable name="parentPid" select="substring(document($lookupParentUri)/s:sparql/s:results/s:result/s:parent/@uri, string-length('info:fedora/') + 1)" />

        <xsl:if test="$parentPid">
            
            <xsl:call-template name="outputBreadcrumbs">
                <xsl:with-param name="pid" select="$parentPid" />
            </xsl:call-template>
            
            <xsl:variable name="parentMetadataUrl">
                <xsl:text>http://</xsl:text><xsl:value-of select="$fedora-host" /><xsl:text>:8080/fedora/objects/</xsl:text>
                <xsl:value-of select="$parentPid" />
                <xsl:text>/datastreams/descMetadata/content</xsl:text>
            </xsl:variable>
            <xsl:if test="$debug = true()">
                <xsl:comment>
                    Querying for the metadata for <xsl:value-of select="$parentPid" /> using query: <xsl:value-of select="$parentMetadataUrl" />
                </xsl:comment>
            </xsl:if>
            <xsl:variable name="parentMetadataFragment" select="document($parentMetadataUrl)" />
            <xsl:variable name="title">
                <xsl:choose>
                    <xsl:when test="$parentMetadataFragment//ead/frontmatter/titlepage/titleproper">
                        <xsl:for-each select="$parentMetadataFragment//ead/frontmatter/titlepage/titleproper//text()">
                            <xsl:value-of select="current()" />
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="$parentMetadataFragment//did/unittitle//text()">
                            <xsl:value-of select="current()" />
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <ancestor>
                <id><xsl:value-of select="$parentPid"></xsl:value-of></id>
                <title><xsl:value-of select="normalize-space($title)" /></title>
            </ancestor>
        </xsl:if>
    </xsl:template>
</xsl:stylesheet>
      </foxml:xmlContent>
    </foxml:datastreamVersion>
  </foxml:datastream>
</foxml:digitalObject>
